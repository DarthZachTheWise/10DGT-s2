{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor right_motor_1 = motor(PORT7, false);\nmotor right_motor_2 = motor(PORT8, false);\nmotor left_motor_1 = motor(PORT1, true);\nmotor left_motor_2 = motor(PORT2, true);\nmotor hit_attack = motor(PORT3, false);\ntouchled TouchLED1 = touchled(PORT12);\ntouchled TouchLED2 = touchled(PORT6);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double BrainTime = Brain.Timer.system() * 1000;\n  double BrainVoltage = Brain.Battery.voltage();\n  // Combine these values into a single integer\n  int seed = int(\n    BrainTime + BrainVoltage\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       Zach Hamilton                                               \n//    Created:      {date}                                                    \n//    Description:  IQ project to conntrol my robot                                               \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat deadBand;\n\n// \"when started\" hat block\nint main() {\n\n  // This sets th died band to 10. \n  deadBand = 10.0; // this stops stike drift\n\n  // All sensing of controller input goes inside the while true (forever) loop\n  while (true) {\n\n    // This makes the left motors go. These velocity is whatever persition the left joystick a axic persition is. \n    if (fabs(static_cast<float>(Controller.AxisA.position())) > deadBand) {\n      left_motor_1.setVelocity(Controller.AxisA.position(), percent); \n      left_motor_2.setVelocity(Controller.AxisA.position(), percent); \n    } else {\n      left_motor_1.setVelocity(0.0,percent);\n      left_motor_2.setVelocity(0.0,percent);\n    }\n\n    \n\n    // This makes the right motors go. These velocity is whatever persition the right joystick D axic persition is. \n    if (fabs(static_cast<float>(Controller.AxisD.position())) > deadBand) {\n      right_motor_1.setVelocity(Controller.AxisD.position(), percent);\n      right_motor_2.setVelocity(Controller.AxisD.position(), percent);\n    } else {\n      right_motor_1.setVelocity(0.0,percent);\n      right_motor_2.setVelocity(0.0,percent);\n    }\n\n\n    // This is telling the motor to spin and that it has to spin forward. \n    left_motor_1.spin(forward);\n    left_motor_2.spin(forward);\n    right_motor_1.spin(forward);\n    right_motor_2.spin(forward);\n    hit_attack.spin(forward);\n\n    \n    // If you press the R down buttom the hit_attack motor is set to 100%. This makes the attack robot hit the ball forward. \n    if (Controller.ButtonRDown.pressing()) {\n      hit_attack.setVelocity(100,percent);\n    } else {\n      hit_attack.setVelocity(0.0, percent);\n    }\n    // This is the victory dance code. When you hole down the E down buttom the left motors are set to 100% and the right motors are set to -100%\n    // This makes the robot  spin in a circle in the spot. The LEDs also flosh through a serces of colours. This disign is more competition friendly\n    // than an automated victory dance because it stops when you let go. This prevents accidental victory dances that you can't stop in theh middle of a game.\n    while (Controller.ButtonEDown.pressing()) {\n    \n      //Set the LEDs to full brightness.\n      TouchLED1.setBrightness(100);\n      TouchLED2.setBrightness(100);\n      // Set the letf and right motors to their respective Velocity.\n      left_motor_1.setVelocity(100,percent);\n      left_motor_2.setVelocity(100,percent);\n      right_motor_1.setVelocity(-100,percent);\n      right_motor_2.setVelocity(-100,percent);\n\n\n      // This set the LED to defferant colours to make the spining look like a victory dance. \n      TouchLED1.setColor(red);\n      TouchLED2.setColor(red);\n      wait(100, msec);\n      TouchLED1.setColor(red_violet);\n      TouchLED2.setColor(red_violet);\n      TouchLED1.setFade(fast);\n      TouchLED2.setFade(fast);\n      wait(100, msec);\n      TouchLED1.setColor(violet);\n      TouchLED2.setColor(violet);\n      TouchLED1.setFade(fast);\n      TouchLED2.setFade(fast);\n      wait(100, msec);\n      TouchLED1.setColor(blue_violet);\n      TouchLED2.setColor(blue_violet);\n      TouchLED1.setFade(fast);\n      TouchLED2.setFade(fast);\n      wait(100, msec);\n      TouchLED1.setColor(blue);\n      TouchLED2.setColor(blue);\n      TouchLED1.setFade(fast);\n      TouchLED2.setFade(fast);\n      wait(100, msec);      \n      \n    }\n  \n    \n    wait(20, msec);\n  }\n}\n\n\n\n\n\n\n\n\n    \n    \n    \n","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[7],"name":"right_motor_1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"right_motor_2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"left_motor_1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"left_motor_2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"hit_attack","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"TouchLED1","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[6],"name":"TouchLED2","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}